<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Todo List</title>
</head>
<body>
  <h1>Todo List</h1>

  <button id="addTodoBtn">Add Todo</button>
  <button id="completeTodoBtn">Complete Todo</button>
  <p id="taskCount">0 tasks</p>

  <ul id="todoList"></ul>

  <script src="todo-list.js"></script>
</body>
</html>
// Define the TodoList component
class TodoList extends HTMLElement {
  constructor() {
    super();
    this.todos = [];
    this.attachShadow({ mode: 'open' });

    this.shadowRoot.innerHTML = `
      <style>
        <style>
        /* Container styles */
        .todo-container {
          max-width: 400px;
          margin: 0 auto;
          padding: 20px;
          background-color: #f5f5f5;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        /* Button styles */
        .btn {
          padding: 10px 16px;
          border: none;
          border-radius: 4px;
          background-color: #4caf50;
          color: #fff;
          font-size: 14px;
          cursor: pointer;
          margin-right: 10px;
        }
        /* Task count styles */
        .task-count {
          margin-bottom: 10px;
          font-size: 16px;
        }

        /* Todo list styles */
        .todo-list {
          list-style-type: none;
          padding: 0;
        }

        .todo-list li {
          padding: 10px;
          background-color: #fff;
          border-radius: 4px;
          margin-bottom: 8px;
        }
      </style>
       <div class="todo-container">
        <h1>Todo List</h1>

        <div>
          <button class="btn" id="addTodoBtn">Add Todo</button>
          <button class="btn" id="completeTodoBtn">Complete Todo</button>
        </div>

        <p class="task-count">0 tasks</p>

        <ul class="todo-list" id="todoList"></ul>
      </div>
    `;
  }

  connectedCallback() {
    // Render initial todos
    this.renderTodos();

    // Add event listeners
    this.shadowRoot.getElementById('addTodoBtn').addEventListener('click', this.addTodo.bind(this));
    this.shadowRoot.getElementById('completeTodoBtn').addEventListener('click', this.completeTodo.bind(this));
  }
   renderTodos() {
    const todoList = this.shadowRoot.getElementById('todoList');
    todoList.innerHTML = '';

    this.todos.forEach((todo, index) => {
      const li = document.createElement('li');
      li.textContent = todo;
      li.dataset.index = index;
      todoList.appendChild(li);
    });

    // Update task count
    this.updateTaskCount();
  }

  addTodo() {
    // Generate a random todo
    const randomTodo = `Task ${Math.floor(Math.random() * 1000)}`;

    // Add the todo to the list
    this.todos.push(randomTodo);

    // Re-render todos
    this.renderTodos();
  }
  completeTodo() {
    if (this.todos.length > 0) {
      // Remove the last todo
      this.todos.pop();

      // Re-render todos
      this.renderTodos();
    }
  }

  updateTaskCount() {
    const taskCount = this.shadowRoot.getElementById('taskCount');
    taskCount.textContent = `${this.todos.length} task${this.todos.length !== 1 ? 's' : ''}`;
  }
}

// Define the custom element
customElements.define('todo-list', TodoList);
